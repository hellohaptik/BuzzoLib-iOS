// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8.1 (swiftlang-5.8.0.124.5 clang-1403.0.22.11.100)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name HaptikCommerce
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import Foundation
@_exported import HaptikCommerce
import Speech
import Starscream
import Swift
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
extension Swift.String : Swift.Error {
}
@_inheritsConvenienceInitializers @objc public class HPCommerceAttributesBuilder : ObjectiveC.NSObject {
  @objc public var sessionID: Swift.String
  @objc public var sourceController: Swift.String
  @objc public var category: Swift.String
  @objc public var abExperiment: Swift.Bool
  @objc public var ASREngine: HaptikCommerce.ASRMode
  @objc public var controllerUUID: Swift.String?
  @objc public var posterDescription: Swift.String?
  @objc public var posterID: Swift.String?
  @objc public var posterTitle: Swift.String?
  @objc public var cart: Swift.String?
  @objc public var customerID: Swift.String
  @objc public var debug: Swift.Bool
  @objc public var geo: Swift.String
  @objc public var language: HaptikCommerce.HPLanguage
  @objc public var mode: Swift.String?
  @objc public var pageTitle: Swift.String?
  @objc public var pageType: Swift.String?
  @objc public var pincode: Swift.String
  @objc public var productID: Swift.String?
  @objc public var productName: Swift.String?
  @objc public var query: Swift.String?
  @objc public var realTime: Swift.Bool
  @objc public var removeOptionBackground: Swift.Bool
  @objc public var searchCriteria: Swift.String?
  @objc public var speak: HaptikCommerce.HPSpeechMode
  @objc public var storeApp: Swift.Bool
  @objc public var tags: Swift.String?
  @objc public var TTSEngine: HaptikCommerce.TTSMode
  @objc public var TTSVoice: HaptikCommerce.TTSVoice
  @objc public var TTSVoiceType: HaptikCommerce.TTSVoiceType
  @objc public var voiceFirst: Swift.Bool
  @objc public var headers: [Swift.String : Swift.String]
  @objc public var customQueryData: [Swift.String : Swift.String]?
  @objc public class func build(data builderData: @escaping (HaptikCommerce.HPCommerceAttributesBuilder) -> Swift.Void) -> Self
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol HPExternalEvent {
  @objc func didReceiveHaptikEvent(_ eventData: Swift.String)
  @objc func didReceiveHaptikError(_ error: Foundation.NSError)
}
@objc public enum HPLanguage : Swift.Int {
  case englishUK
  case englishUS
  case englishIN
  case hindi
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum HPSpeechMode : Swift.Int {
  case alwaysOn
  case alwaysOff
  case whenSpokenTo
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum TTSMode : Swift.Int {
  case appleNative
  case googleTTS
  case reverieTTS
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum TTSVoiceType : Swift.Int {
  case standard
  case wavenet
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum TTSVoice : Swift.Int {
  case male
  case female
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum ASRMode : Swift.Int {
  case appleNative
  case reverieASR
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class HaptikCommerceLib : ObjectiveC.NSObject {
  @objc public static let sharedSDK: HaptikCommerce.HaptikCommerceLib
  @objc public var delegate: (any HaptikCommerce.HPExternalEvent)?
  @objc deinit
}
extension HaptikCommerce.HaptikCommerceLib {
  @objc dynamic public func loadConversation(launchController: UIKit.UIViewController, attributes: HaptikCommerce.HPCommerceAttributesBuilder)
  @objc dynamic public func unregister()
  @objc dynamic public func updateEventData(eventName: Swift.String, eventData: [Swift.String : Any])
  @objc dynamic public func setupGoogle(apiKey: Swift.String)
  @objc dynamic public func setupReverie(apiKey: Swift.String, appId: Swift.String, domain: Swift.String)
}
extension HaptikCommerce.HPLanguage : Swift.Equatable {}
extension HaptikCommerce.HPLanguage : Swift.Hashable {}
extension HaptikCommerce.HPLanguage : Swift.RawRepresentable {}
extension HaptikCommerce.HPSpeechMode : Swift.Equatable {}
extension HaptikCommerce.HPSpeechMode : Swift.Hashable {}
extension HaptikCommerce.HPSpeechMode : Swift.RawRepresentable {}
extension HaptikCommerce.TTSMode : Swift.Equatable {}
extension HaptikCommerce.TTSMode : Swift.Hashable {}
extension HaptikCommerce.TTSMode : Swift.RawRepresentable {}
extension HaptikCommerce.TTSVoiceType : Swift.Equatable {}
extension HaptikCommerce.TTSVoiceType : Swift.Hashable {}
extension HaptikCommerce.TTSVoiceType : Swift.RawRepresentable {}
extension HaptikCommerce.TTSVoice : Swift.Equatable {}
extension HaptikCommerce.TTSVoice : Swift.Hashable {}
extension HaptikCommerce.TTSVoice : Swift.RawRepresentable {}
extension HaptikCommerce.ASRMode : Swift.Equatable {}
extension HaptikCommerce.ASRMode : Swift.Hashable {}
extension HaptikCommerce.ASRMode : Swift.RawRepresentable {}
